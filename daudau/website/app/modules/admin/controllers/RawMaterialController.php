<?php


namespace Daudau\Modules\Admin\Controllers;


use Daudau\Common\Models\Recipe\Quantitative;
use Daudau\Common\Models\Recipe\RawMaterial;
use Daudau\Common\Models\Users\Role;
use Daudau\Common\Models\Users\Status;
use Daudau\Modules\Admin\Forms\RawMaterialForm;
use Daudau\Modules\Admin\Forms\RoleForm;
use Phalcon\Tag;

class RawMaterialController extends BaseDashboardController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function listRawMaterialAction()
    {
        $this->view->activemenu = [
            'recipe',
            'raw_material_list'
        ];
        $this->view->names = [
            [
                'label' => 'Danh sách nguyên liệu',
                'href' => '/admin/role/listRole'
            ],
        ];
        $current_page = $this->request->getQuery('page', 'int', 1);
        $limit_of_page = 10;
        $form = new RawMaterialForm();
        $form->search();
        $this->view->form = $form;
        $cond_array = [];
        $param_url = $this->request->getQuery();
        $bind_data = [];
        foreach ($param_url as $key => $value) {
            Tag::setDefault($key, $value);
            if ($key != '_url' && $key != 'page' && $value != '') {
                if ($key == 'active' && $value != '') {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                } else if ($key == 'active' && $value == '') {
                    array_push($cond_array, "active='1'");
                } else {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                }
            }
        }

        $conditions = implode(' AND ', $cond_array);
        $raw_meterial = RawMaterial::find([
            'conditions' => $conditions,
            'bind' => $bind_data,
            'limit' => $limit_of_page,
            'offset' => (($current_page - 1) * $limit_of_page),
        ]);
        $raw_meterial_total_record = RawMaterial::count([
            'conditions' => $conditions,
            'bind' => $bind_data
        ]);
        if (count($raw_meterial) == 0) {
            $this->view->raw_meterial = null;
        } else {
            $this->view->raw_meterial = $raw_meterial;
        }
        $this->view->paging = $this->helper->util()->paging($raw_meterial_total_record, $this->request->getQuery(), $limit_of_page, $current_page);

    }

    public function createRawMaterialAction()
    {
        $this->view->activemenu = [
            'recipe',
            'raw_material_create'
        ];
        $this->view->names = [
            [
                'label' => 'Tạo nguyên liệu',
                'href' => '/admin/raw-material/createRawMaterial'
            ],
        ];
        $raw_material = new RawMaterial();
        $form = new RawMaterialForm();
        $form->create();
        $this->view->form = $form;
        if ($this->request->isPost()) {
            $post = $this->request->getPost();
            $raw_material->setId($raw_material->getSequenceId());
            $form->bind($post, $raw_material);
            $error = RawMaterial::checkValidations($post);
            if (count($error) != 0) {
                foreach ($error as $er) {
                    $this->flashSession->error($this->helper->translate($er));
                }
            } else {
                if ($raw_material->save()) {
                    $this->flashSession->success($this->helper->translate('Tạo nguyên liệu thành công'));
                    return $this->redirect('/admin/raw-material/listRawMaterial');
                } else {
                    foreach ($raw_material->getMessages() as $message) {
                        $this->flashSession->error($this->helper->translate($message->getMessage()));
                    }
                    $form->setEntity($post);
                }
            }
        }
    }

    public function deleteRawMaterialAction($id)
    {
        $this->view->disable();
        $status_id_disable = Status::getStatusIdByCode('disable');
        $raw_material = RawMaterial::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        if ($raw_material) {
            $raw_material->setStatusId($status_id_disable);
            $this->flashSession->success($this->helper->translate('Xóa thành công'));

            $raw_material->save();
        } else {
            $this->flashSession->warning($this->helper->translate('Không tìm thấy nguyên liệu'));

        }
        return $this->redirect('/admin/raw-material/listRawMaterial');
    }

    public function editRawMaterialAction($id)
    {
        $this->view->activemenu = [
            'user',
            'raw_material_list'
        ];
        $this->view->names = [
            [
                'label' => 'Chỉnh sửa nguyên liệu',
                'href' => '/admin/raw-material/listRawMaterial'
            ],
        ];
        $form = new RawMaterialForm();
        $form->edit();

        $raw_material = RawMaterial::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        if ($this->request->isPost()) {
            $post = $this->request->getPost();
            if($post['name'] != $raw_material->getName())
            {
                $check=RawMaterial::findFirst([
                    'conditions'=>'name=:name:',
                    'bind'=>[
                        'name'=>$post['name']
                    ]
                ]);
                if($check)
                {
                    $this->flashSession->error('Tên nguyên liệu đã tồn tại');
                    return $this->redirect('/admin/raw-material/listRawMaterial');
                }
            }
            if($post['code'] != $raw_material->getCode())
            {
                $check=RawMaterial::findFirst([
                    'conditions'=>'code=:code:',
                    'bind'=>[
                        'code'=>$post['code']
                    ]
                ]);
                if($check)
                {
                    $this->flashSession->error('Mã số nguyên liệu đã tồn tại');
                    return $this->redirect('/admin/raw-material/listRawMaterial');
                }
            }
            if($post['short_code'] != $raw_material->getShortCode())
            {
                $check=RawMaterial::findFirst([
                    'conditions'=>'short_code=:short_code:',
                    'bind'=>[
                        'short_code'=>$post['short_code']
                    ]
                ]);
                if($check)
                {
                    $this->flashSession->error('Mã số rút gọn nguyên liệu đã tồn tại');
                    return $this->redirect('/admin/raw-material/listRawMaterial');
                }
            }
            $form->bind($post, $raw_material);
            if ($raw_material->save()) {
                $this->flashSession->success($this->helper->translate('Chỉnh sửa nguyên liệu thành công'));
                return $this->redirect('/admin/raw-material/listRawMaterial');
            } else {
                foreach ($raw_material->getMessages() as $message) {
                    $this->flashSession->error($this->helper->tranlate($message->getMessage()));
                }
            }
        } else {
            $form->setEntity($raw_material);
        }

        $this->view->form = $form;
    }

    public function viewRawMaterialAction($id)
    {
        $this->view->activemenu = [
            'recipe',
            'raw_material_list'
        ];
        $this->view->names = [
            [
                'label' => 'Xem thông tin nguyên liệu',
                'href' => '/admin/raw-material/listRawMaterial'
            ],
        ];
        $form = new RawMaterialForm();
        $form->view();
        $raw_material = RawMaterial::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        $form->setEntity($raw_material);
        $this->view->form = $form;
    }
}