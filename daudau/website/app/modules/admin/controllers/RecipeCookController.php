<?php


namespace Daudau\Modules\Admin\Controllers;


use Daudau\Common\Models\Bookmark\BookmarkUser;
use Daudau\Common\Models\Bookmark\Category;
use Daudau\Common\Models\Bookmark\CategoryType;
use Daudau\Common\Models\Recipe\Image;
use Daudau\Common\Models\Recipe\Quantitative;
use Daudau\Common\Models\Recipe\RawMaterial;
use Daudau\Common\Models\Recipe\RecipeCategory;
use Daudau\Common\Models\Recipe\RecipeCook;
use Daudau\Common\Models\Recipe\RecipeMaterial;
use Daudau\Common\Models\Recipe\SpamRecipe;
use Daudau\Common\Models\Recipe\Step;
use Daudau\Common\Models\Users\Status;
use Daudau\Common\Models\Users\UsersCategory;
use Daudau\Modules\Admin\Forms\categoryForm;
use Daudau\Modules\Admin\Forms\RecipeCookForm;
use Phalcon\Tag;

class RecipeCookController extends BaseDashboardController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function listRecipeCookAction()
    {
        $this->view->activemenu = [
            'recipe',
            'recipe_list'
        ];
        $this->view->names = [
            [
                'label' => 'Danh sách công thức',
                'href' => '/admin/recipe-cook/listRecipeCook'
            ],
        ];
        $current_page = $this->request->getQuery('page', 'int', 1);
        $auth = $this->auth->getAuth();
        $limit_of_page = 10;
        $form = new RecipeCookForm();
        $form->search();
        $this->view->form = $form;
        $cond_array = [];
        $param_url = $this->request->getQuery();
        $bind_data = [];
        foreach ($param_url as $key => $value) {
            Tag::setDefault($key, $value);
            if ($key != '_url' && $key != 'page' && $value != '') {
                if ($key == 'active' && $value != '') {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                } else if ($key == 'active' && $value == '') {
                    array_push($cond_array, "active='1'");
                } else {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                }
            }
        }
        $status_id_old = Status::getStatusIdByCode('old');
        $status_id_enable = Status::getStatusIdByCode('enable');
        array_push($cond_array, "status_id !=$status_id_old");

        $conditions = implode(' AND ', $cond_array);

        $user_category = UsersCategory::find([
            'conditions' => 'user_id=:user_id: and status_id=:status_id:',
            'bind' => [
                'user_id' => $auth['id'],
                'status_id' => $status_id_enable
            ]
        ]);
        $list_id_category = [];
        foreach ($user_category as $item) {
            if ($item->category->category_type->getCode() == 'CACH-THUC-HIEN') {
                $list_id_category[] = $item->getCategoryId();
            }
        }
        $list_id_recipe = [];
        foreach ($list_id_category as $item) {
            $recipe_category = RecipeCategory::find([
                'conditions' => 'category_id=:category_id:',
                'bind' => [
                    'category_id' => $item
                ]
            ]);
            foreach ($recipe_category as $item2) {
                $list_id_recipe[] = $item2->getRecipeCookId();
            }

        }
        if (count($list_id_recipe) == 0) {
            if ($auth['role'] == 'ADMIN') {
                $rs = RecipeCook::query()
                    ->columns("Daudau\Common\Models\Recipe\RecipeCook.*")
                    ->Where("Daudau\Common\Models\Recipe\RecipeCook.status_id!=" . $status_id_old)
                    ->orderBy("Daudau\Common\Models\Recipe\RecipeCook.created_time DESC")
                    ->limit($limit_of_page, (($current_page - 1) * $limit_of_page));
                $recipe_cook = $rs->execute();
                $recipe_cook_total_record = count(RecipeCook::query()
                    ->columns("Daudau\Common\Models\Recipe\RecipeCook.*")
                    ->Where("Daudau\Common\Models\Recipe\RecipeCook.status_id!=" . $status_id_old)
                    ->execute());
            } else {
                $recipe_cook = [];
                $recipe_cook_total_record = 0;
            }

        } else {
            $rs = RecipeCook::query()
                ->columns("Daudau\Common\Models\Recipe\RecipeCook.*")
                ->where("Daudau\Common\Models\Recipe\RecipeCook.id IN (" . implode(',', $list_id_recipe) . ")")
                ->andWhere("Daudau\Common\Models\Recipe\RecipeCook.status_id!=" . $status_id_old)
                ->orderBy("Daudau\Common\Models\Recipe\RecipeCook.created_time DESC")
                ->limit($limit_of_page, (($current_page - 1) * $limit_of_page));
            $recipe_cook = $rs->execute();
            $recipe_cook_total_record = count(RecipeCook::query()
                ->columns("Daudau\Common\Models\Recipe\RecipeCook.*")
                ->where("Daudau\Common\Models\Recipe\RecipeCook.id IN (" . implode(',', $list_id_recipe) . ")")
                ->andWhere("Daudau\Common\Models\Recipe\RecipeCook.status_id!=" . $status_id_old)
                ->execute());

        }


        if (count($recipe_cook) == 0) {
            $this->view->recipe_cook = null;
        } else {
            $this->view->recipe_cook = $recipe_cook;
        }
        $this->view->paging = $this->helper->util()->paging($recipe_cook_total_record, $this->request->getQuery(), $limit_of_page, $current_page);

    }

    public function deleteRecipeCookAction($id)
    {
        $this->view->disable();
        $status_id_disable = Status::getStatusIdByCode('disable');

        $this->db->begin();
        $status_id_disable = Status::getStatusIdByCode('disable');
        $recipe = RecipeCook::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        $recipe->setStatusId($status_id_disable);
        $recipe->save();
        $recipe_material = RecipeMaterial::find([
            'conditions' => 'recipe_cook_id=:recipe_cook_id:',
            'bind' => [
                'recipe_cook_id' => $id
            ]
        ]);
        foreach ($recipe_material as $item) {
            $item->setStatusId($status_id_disable);
            $item->save();
        }
        $step = Step::find([
            'conditions' => 'recipe_cook_id=:recipe_cook_id:',
            'bind' => [
                'recipe_cook_id' => $id
            ]
        ]);
        foreach ($step as $item) {
            $item->setStatusId($status_id_disable);
            $item->save();
        }
        $recipe_category = RecipeCategory::find([
            'conditions' => 'recipe_cook_id=:recipe_cook_id:',
            'bind' => [
                'recipe_cook_id' => $id
            ]
        ]);
        foreach ($recipe_category as $item) {
            $item->setStatusId($status_id_disable);
            $item->save();
        }
        $this->db->commit();
        $this->flashSession->warning($this->helper->translate('Xóa công thức thành công'));
        $this->redirect('/admin/recipe-cook/listRecipeCook');

    }

    public function informationRecipeCookAction($id)
    {

        $this->view->activemenu = [
            'recipe',
            'recipe_list'
        ];

        $status_id_enable = Status::getStatusIdByCode('enable');
        $status_id_confirm = Status::getStatusIdByCode('confirm');
        $status_id_reject = Status::getStatusIdByCode('reject');
        $status_id_old = Status::getStatusIdByCode('old');
        $status_id_edit = Status::getStatusIdByCode('edit');
        $this->view->names = [
            [
                'label' => 'Thông tin công thức',
                'href' => '/admin/recipe-cook/informationRecipeCook'
            ],
        ];
        if ($this->request->isPost()) {
            $this->db->begin();
            $id = $this->request->getPost('id');
            $type = $this->request->getPost('type');
            $recipe_cook = RecipeCook::findFirst([
                'conditions' => 'id=:id:',
                'bind' => [
                    'id' => $id
                ]
            ]);
            if ($type == 'comfirm') {
                $recipe_cook->setStatusId($status_id_enable);
                $image_step = Image::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);
                foreach ($image_step as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }
                $step = Step::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);
                foreach ($step as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }

                $recipe_material = RecipeMaterial::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);

                foreach ($recipe_material as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }

                $recipe_category = RecipeCategory::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);
                foreach ($recipe_category as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }

            } elseif ($type == "reject") {
                $recipe_cook->setStatusId($status_id_reject);
                $image_step = Image::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);
                foreach ($image_step as $item) {
                    $item->setStatusId($status_id_reject);
                    $item->save();
                }
                $step = Step::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);
                foreach ($step as $item) {
                    $item->setStatusId($status_id_reject);
                    $item->save();
                }

                $recipe_material = RecipeMaterial::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);

                foreach ($recipe_material as $item) {
                    $item->setStatusId($status_id_reject);
                    $item->save();
                }

                $recipe_category = RecipeCategory::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_confirm
                    ]
                ]);
                foreach ($recipe_category as $item) {
                    $item->setStatusId($status_id_reject);
                    $item->save();
                }


            } elseif ($type == "reject-edit") {
                $image_step = Image::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($image_step as $item) {
                    $item->delete();
                }

                $image_step = Image::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($image_step as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }

                $step = Step::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($step as $item) {
                    $item->delete();
                }
                $step = Step::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($step as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }

                $recipe_material = RecipeMaterial::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($recipe_material as $item) {
                    $item->delete();
                }

                $recipe_material = RecipeMaterial::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($recipe_material as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }
                $recipe_category = RecipeCategory::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($recipe_category as $item) {
                    $item->delete();
                }
                $recipe_category = RecipeCategory::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($recipe_category as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }
                $recipe_cook_old = RecipeCook::find([
                    'conditions' => 'status_id=:status_id:',
                    'bind' => [
                        'status_id' => $status_id_old
                    ]
                ]);
                $image= Image::findFirst([
                    'conditions' => 'id =:id:',
                    'bind' => [
                        'id' => $recipe_cook->getImageId()
                    ]
                ]);
                foreach ($recipe_cook_old as $item) {
                    $recipe_cook_code = $item->getCode();
                    $parts = explode('-', $recipe_cook_code);
                    $last = array_pop($parts);
                    $parts = array(implode('-', $parts), $last);
                    if ($parts[1] == $recipe_cook->getId()) {
                        $recipe_cook->setName($item->getName());
                        $recipe_cook->setCode($item->getCode());
                        $recipe_cook->setBookmarkTotal($item->getBookmarkTotal());
                        $recipe_cook->setUserId($item->getUserId());
                        $recipe_cook->setCreatedTime($item->getCreatedTime());
                        $recipe_cook->setModifiedTime($item->getModifiedTime());
                        $recipe_cook->setImageId($item->getImageId());
                        $recipe_cook->setLevel($item->getLevel());
                        $recipe_cook->setTimeDo($item->getTimeDo());
                        $recipe_cook->setDescription($item->getDescription());
                        $recipe_cook->setSeenTotal($item->getSeenTotal());
                        $recipe_cook->setImageId($item->getImageId());
                        $recipe_cook->setStatusId($status_id_enable);
                        $image_old = Image::find([
                            'conditions' => 'status_id=:status_id:',
                            'bind' => [
                                'status_id' => $status_id_old
                            ]
                        ]);
                        foreach ($image_old as $item2)
                        {
                            $image_code = $item2->getCode();
                            $parts = explode('_', $image_code);
                            $last = array_pop($parts);
                            $parts = array(implode('-', $parts), $last);
                            if($parts[1]==$recipe_cook->getId())
                            {
                                $image->setCode($item2->getCode());
                                $image->setImageBase($item2->getImageBase());
                                $image->setImageUrl($item2->getImageUrl());
                                $image->setStatusId($status_id_enable);

                                $image->save();
                                $item2->delete();
                            }
                        }
                        $image->setStatusId($status_id_enable);
                        $image->save();
                        $item->delete();
                    }
                }


            } elseif ($type == "edit") {
                $image_step = Image::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($image_step as $item) {
                    $item->delete();
                }
                $image_step = Image::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($image_step as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }
                $step = Step::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($step as $item) {
                    $item->delete();
                }
                $step = Step::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($step as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }

                $recipe_material = RecipeMaterial::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($recipe_material as $item) {
                    $item->delete();
                }

                $recipe_material = RecipeMaterial::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($recipe_material as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }
                $recipe_category = RecipeCategory::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_old
                    ]
                ]);
                foreach ($recipe_category as $item) {
                    $item->delete();
                }
                $recipe_category = RecipeCategory::find([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id =:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook->getId(),
                        'status_id' => $status_id_edit
                    ]
                ]);
                foreach ($recipe_category as $item) {
                    $item->setStatusId($status_id_enable);
                    $item->save();
                }
                $recipe_cook->setStatusId($status_id_enable);
                $image = Image::findFirst([
                    'conditions' => 'id=:id:',
                    'bind' => [
                        'id' => $recipe_cook->getImageId()
                    ]
                ]);
                $image->setStatusId($status_id_enable);
                $image->save();
                $recipe_cook_old = RecipeCook::find([
                    'conditions' => 'status_id=:status_id:',
                    'bind' => [
                        'status_id' => $status_id_old
                    ]
                ]);
                $image= Image::findFirst([
                    'conditions' => 'id =:id:',
                    'bind' => [
                        'id' => $recipe_cook->getImageId()
                    ]
                ]);
                foreach ($recipe_cook_old as $item) {
                    $recipe_cook_code = $item->getCode();
                    $parts = explode('-', $recipe_cook_code);
                    $last = array_pop($parts);
                    $parts = array(implode('-', $parts), $last);
                    if ($parts[1] == $recipe_cook->getId()) {
                        $item->delete();

                        $image_old = Image::find([
                            'conditions' => 'status_id=:status_id:',
                            'bind' => [
                                'status_id' => $status_id_old
                            ]
                        ]);
                        foreach ($image_old as $item2)
                        {
                            $image_code = $item2->getCode();
                            $parts = explode('_', $image_code);
                            $last = array_pop($parts);
                            $parts = array(implode('-', $parts), $last);
                            if($parts[1]==$recipe_cook->getId())
                            {
                                $item2->delete();
                            }
                        }

                    }
                }
            }
            $recipe_cook->save();
            $this->db->commit();
            $this->redirect($_SERVER['REQUEST_URI']);
        } else {
            $recipe_cook = RecipeCook::findFirst([
                'conditions' => 'id=:id:',
                'bind' => [
                    'id' => $id
                ]
            ]);
            $status = $recipe_cook->getStatusId();
            $list_recipe_material = RecipeMaterial::find([
                'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                'bind' => [
                    'recipe_cook_id' => $recipe_cook->getId(),
                    'status_id' => $status
                ]
            ]);
            $list_step = Step::find([
                'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                'bind' => [
                    'recipe_cook_id' => $recipe_cook->getId(),
                    'status_id' => $status,

                ],
                'order' => 'count ASC'
            ]);
            $stepImage = Image::find([
                'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                'bind' => [
                    'recipe_cook_id' => $recipe_cook->getId(),
                    'status_id' => $status
                ],
                'order' => 'recipe_cook_id ASC, step_id ASC, count_step ASC'
            ]);
            $list_step_image = [];
            foreach ($stepImage as $item) {
                $list_step_image[$item->getRecipeCookId()][$item->getStepId()][$item->getCountStep()] = $item;
            }

            $list_category_type = CategoryType::find();
            $list_raw_material = RawMaterial::find();
            $list_quantitative = Quantitative::find();
            $list_category = [];
            foreach ($list_category_type as $item) {
                $list_category_by_category_type = Category::find([
                    'conditions' => 'type_id=:type_id:',
                    'bind' => [
                        'type_id' => $item->getId()
                    ]
                ]);
                $list_category[$item->getName()] = $list_category_by_category_type;
            }
            $recipe_category = RecipeCategory::find([
                'conditions' => 'recipe_cook_id=:recipe_cook_id: and status_id=:status_id:',
                'bind' => [
                    'recipe_cook_id' => $recipe_cook->getId(),
                    'status_id' => $status
                ]
            ]);
            $list_recipe_category = [];
            foreach ($recipe_category as $item) {
                $list_recipe_category[$item->getCategoryId()] = $item;
            }
            $this->view->list_recipe_category = $list_recipe_category;
            $this->view->list_raw_material = $list_raw_material;
            $this->view->list_quantitative = $list_quantitative;
            $this->view->list_category_type = $list_category_type;
            $this->view->list_category = $list_category;
            $this->view->list_step_image = $list_step_image;
            $this->view->recipe_cook_id = $recipe_cook->getId();
            $this->view->recipe_cook = $recipe_cook;
            $this->view->list_step = $list_step;
            $this->view->list_recipe_material = $list_recipe_material;
            $this->view->count_list_recipe_material = count($list_recipe_material);
            if ($recipe_cook->getStatusId() == $status_id_confirm) {
                $this->view->btn = 'confirm';
            } elseif ($recipe_cook->getStatusId() == $status_id_reject) {
                $this->view->btn = 'reject';
            } elseif ($recipe_cook->getStatusId() == $status_id_edit) {
                $this->view->btn = 'edit';
            } else {
                $this->view->btn = '';
            }
        }
    }

    public function editRecipeCookAction($id)
    {
        $this->view->activemenu = [
            'bookmark',
            'category_list'
        ];
        $this->view->names = [
            [
                'label' => 'Chỉnh sửa công thức',
                'href' => '/admin/recipe-cook/editRecipeCook'
            ],
        ];
        $form = new RecipeCookForm();
        $form->edit();

        $recipe_cook = RecipeCook::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        if ($this->request->isPost()) {
            $post = $this->request->getPost();
            $form->bind($post, $recipe_cook);
            if ($recipe_cook->save()) {
                $this->flashSession->success($this->helper->translate('Chỉnh sửa công thức thành công'));
                return $this->redirect('/admin/recipe-cook/listRecipeCook');
            } else {
                foreach ($recipe_cook->getMessages() as $message) {
                    $this->flashSession->error($this->helper->tranlate($message->getMessage()));
                }
            }
        } else {
            $form->setEntity($recipe_cook);
        }

        $this->view->form = $form;
    }

    public function viewBookmarkAction($id)
    {
        $this->view->activemenu = [
            'bookmark',
            'category_list'
        ];
        $this->view->names = [
            [
                'label' => 'View Category',
                'href' => '/admin/category/listCategory'
            ],
        ];
        $form = new categoryForm();
        $form->view();
        $category = Category::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        $form->setEntity($category);
        $this->view->form = $form;
    }

    public function ajaxRatingRecipeAction()
    {
        $this->view->disable();
        $post = $this->request->getPost();
        $status_id_disable = Status::getStatusIdByCode('disable');
        $status_id_enable = Status::getStatusIdByCode('enable');
        $rate_recipe = SpamRecipe::findFirst([
            'conditions' => 'user_id=:user_id: and recipe_cook_id=:recipe_cook_id: and type=:type:',
            'bind' => [
                'user_id' => $post['user'],
                'recipe_cook_id' => $post['recipe_cook_id'],
                'type' => 'rate'
            ]
        ]);
        if ($rate_recipe) {
            $rate_recipe->setPoint($post['point_rate']);
            $rate_recipe->save();
            $total = SpamRecipe::average([
                'column' => 'point',
                'conditions' => 'recipe_cook_id=:recipe_cook_id: and type=:type:',
                'bind' => [
                    'recipe_cook_id' => $post['recipe_cook_id'],
                    'type' => 'rate'
                ]
            ]);
            $demo =
                [
                    'value' => $total,
                ];

        } else {
            $rate_recipe = new SpamRecipe();
            $rate_recipe->setId($rate_recipe->getSequenceId());
            $rate_recipe->setUserId($post['user']);
            $rate_recipe->setRecipeCookId($post['recipe_cook_id']);
           // $rate_recipe->setStatusId($status_id_enable);
            $rate_recipe->setType('rate');
            $rate_recipe->setPoint($post['point_rate']);
            $rate_recipe->save();
            $total = SpamRecipe::average([
                'column' => 'point',
                'conditions' => 'recipe_cook_id=:recipe_cook_id: and type=:type:',
                'bind' => [
                    'recipe_cook_id' => $post['recipe_cook_id'],
                    'type' => 'rate'
                ]
            ]);
            $demo =
                [
                    'value' => $total
                ];
        }
        echo json_encode($demo);
        die();
    }

    public function spamRecipeCookAction($id)
    {
        $this->view->activemenu = [
            'bookmark',
            'category_list'
        ];
        $this->view->names = [
            [
                'label' => 'Danh sách phản hồi công thức',
                'href' => '/admin/category/listCategory'
            ],
        ];
        $spam_recipe_cook= SpamRecipe::find([
            'conditions'=>'recipe_cook_id=:recipe_cook_id: and type=:type:',
            'bind'=>[
                'recipe_cook_id'=>$id,
                'type'=>'spam'
            ]
        ]);
        $this->view->spam_recipe_cook=$spam_recipe_cook;
    }

}