<?php


namespace Daudau\Modules\Admin\Controllers;


use Daudau\Common\Models\Bookmark\Bookmark;
use Daudau\Common\Models\Bookmark\BookmarkUser;
use Daudau\Common\Models\Bookmark\Category;
use Daudau\Common\Models\Recipe\RecipeCook;
use Daudau\Common\Models\Users\Status;
use Daudau\Modules\Admin\Forms\BookmarkForm;
use Daudau\Modules\Admin\Forms\categoryForm;
use Phalcon\Tag;

class BookmarkController extends BaseDashboardController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function listBookmarkAction()
    {
        $this->view->activemenu = [
            'bookmark',
            'bookmark_list'
        ];
        $this->view->names = [
            [
                'label' => 'Danh sách đánh dấu',
                'href' => '/admin/category/listBookmark'
            ],
        ];
        $current_page = $this->request->getQuery('page', 'int', 1);
        $limit_of_page = 10;
        $form = new BookmarkForm();
        $form->search();
        $this->view->form = $form;
        $cond_array = [];
        $param_url = $this->request->getQuery();
        $bind_data = [];
        foreach ($param_url as $key => $value) {
            Tag::setDefault($key, $value);
            if ($key != '_url' && $key != 'page' && $value != '') {
                if ($key == 'active' && $value != '') {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                } else if ($key == 'active' && $value == '') {
                    array_push($cond_array, "active='1'");
                } else {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                }
            }
        }

        $conditions = implode(' AND ', $cond_array);
        $bookmark = Bookmark::find([
            'conditions' => $conditions,
            'bind' => $bind_data,
            'limit' => $limit_of_page,
            'offset' => (($current_page - 1) * $limit_of_page),
        ]);
        $bookmark_total_record = Bookmark::count([
            'conditions' => $conditions,
            'bind' => $bind_data
        ]);
        if (count($bookmark) == 0) {
            $this->view->bookmark = null;
        } else {
            $this->view->bookmark = $bookmark;
        }
        $this->view->paging = $this->helper->util()->paging($bookmark, $this->request->getQuery(), $limit_of_page, $current_page);

    }

    public function createBookmarkAction()
    {
        $this->view->activemenu = [
            'recipe',
            'category_create'
        ];
        $this->view->names = [
            [
                'label' => 'Tạo nhóm công thức',
                'href' => '/admin/category/createcategory'
            ],
        ];
        $category = new Category();
        $form = new categoryForm();
        $form->create();
        $this->view->form = $form;
        if ($this->request->isPost()) {
            $post = $this->request->getPost();
            $category->setId($category->getSequenceId());
            $form->bind($post, $category);
            $category->setTypeId(1);
            $error = Category::checkValidations($post);
            if (count($error) != 0) {
                foreach ($error as $er) {
                    $this->flashSession->error($this->helper->translate($er));
                }
            } else {
                if ($category->save()) {
                    $this->flashSession->success($this->helper->translate('Tạo một nhóm công thức thành công'));
                    return $this->redirect('/admin/category/listcategory');
                } else {
                    foreach ($category->getMessages() as $message) {
                        $this->flashSession->error($this->helper->translate($message->getMessage()));
                    }
                    $form->setEntity($post);
                }
            }
        }
    }

    public function deleteBookmarkAction($id)
    {
        $this->view->disable();
        $category = Category::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        if ($category) {
            $category->setStatusId(0);
            $category->save();
        } else {
            $this->flashSession->warning($this->helper->translate('Nhóm công thức không tìm thấy'));
        }
    }

    public function editBookmarkAction($id)
    {
        $this->view->activemenu = [
            'bookmark',
            'category_list'
        ];
        $this->view->names = [
            [
                'label' => 'Chỉnh sửa đánh dấu',
                'href' => '/admin/category/listCategory'
            ],
        ];
        $form = new categoryForm();
        $form->edit();

        $category = Category::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        if ($this->request->isPost()) {
            $post = $this->request->getPost();
            $form->bind($post, $category);
            if ($category->save()) {
                $this->flashSession->success($this->helper->translate('Chỉnh sửa đánh dấu thành công'));
                return $this->redirect('/admin/category/listCategory');
            } else {
                foreach ($category->getMessages() as $message) {
                    $this->flashSession->error($this->helper->tranlate($message->getMessage()));
                }
            }
        } else {
            $form->setEntity($category);
        }

        $this->view->form = $form;
    }

    public function viewBookmarkAction($id)
    {
        $this->view->activemenu = [
            'bookmark',
            'category_list'
        ];
        $this->view->names = [
            [
                'label' => 'Xem thông tin đánh dấu',
                'href' => '/admin/category/listCategory'
            ],
        ];
        $form = new categoryForm();
        $form->view();
        $category = Category::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $id
            ]
        ]);
        $form->setEntity($category);
        $this->view->form = $form;
    }

    public function ajaxFavouriteAction()
    {
        $status_id_disable = Status::getStatusIdByCode('disable');
        $status_id_enable = Status::getStatusIdByCode('enable');
        $this->view->disable();
        $post = $this->request->getPost();
        $recipe_cook_id = $post['id'];
        $recipe_cook = RecipeCook::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $recipe_cook_id
            ]
        ]);
        $auth_site_home = $this->auth->getAuthSiteHome();
        $bookmark = Bookmark::findFirst([
            'conditions' => 'user_id=:user_id: and recipe_cook_id=:recipe_cook_id: and bookmark_type=:bookmark_type:',
            'bind' => [
                'user_id' => $auth_site_home['id'],
                'recipe_cook_id' => $recipe_cook_id,
                'bookmark_type' => 'favourite'
            ]
        ]);
        if ($bookmark) {
            if ($bookmark->getStatusId() == $status_id_disable) {
                $bookmark->setStatusId($status_id_enable);
                $bookmark->setBookmarkType('favourite');
                $bookmark->save();
                $recipe_cook->setBookmarkTotal($recipe_cook->getBookmarkTotal() + 1);
                $bookmarktotal = $recipe_cook->getBookmarkTotal();
                $recipe_cook->save();
                $demo =
                    [
                        'value' => 'enable',
                        'totalbookmark' => $bookmarktotal,
                    ];
            } else {
                $bookmark->setStatusId($status_id_disable);
                $bookmark->setBookmarkType('favourite');
                $bookmark->save();
                $recipe_cook->setBookmarkTotal($recipe_cook->getBookmarkTotal() - 1 < 0 ? 0 : $recipe_cook->getBookmarkTotal() - 1);
                $bookmarktotal = $recipe_cook->getBookmarkTotal();
                $recipe_cook->save();
                $demo =
                    [
                        'value' => 'disable',
                        'totalbookmark' => $bookmarktotal,
                    ];
            }
        } else {
            $bookmark = new Bookmark();
            $bookmark->setId($bookmark->getSequenceId());
            $bookmark->setUserId($auth_site_home['id']);
            $bookmark->setRecipeCookId($recipe_cook_id);
            $bookmark->setStatusId($status_id_enable);
            $bookmark->setBookmarkType('favourite');
            $bookmark->save();
            $recipe_cook->setBookmarkTotal($recipe_cook->getBookmarkTotal() + 1);
            $bookmarktotal = $recipe_cook->getBookmarkTotal();
            $recipe_cook->save();
            $demo =
                [
                    'value' => 'enable',
                    'totalbookmark' => $bookmarktotal,

                ];

        }
        echo json_encode($demo);
        die();
    }

    public function ajaxBookmarkAction()
    {
        $status_id_disable = Status::getStatusIdByCode('disable');
        $status_id_enable = Status::getStatusIdByCode('enable');
        $this->view->disable();
        $post = $this->request->getPost();
        $recipe_cook_id = $post['id'];
        $recipe_cook = RecipeCook::findFirst([
            'conditions' => 'id=:id:',
            'bind' => [
                'id' => $recipe_cook_id
            ]
        ]);
        $auth_site_home = $this->auth->getAuthSiteHome();
        $bookmark = Bookmark::findFirst([
            'conditions' => 'user_id=:user_id: and recipe_cook_id=:recipe_cook_id: and bookmark_type=:bookmark_type: ',
            'bind' => [
                'user_id' => $auth_site_home['id'],
                'recipe_cook_id' => $recipe_cook_id,
                'bookmark_type' => 'bookmark'
            ]
        ]);
        if ($bookmark) {
            if ($bookmark->getStatusId() == $status_id_disable) {
                $bookmark->setStatusId($status_id_enable);
                $bookmark->setBookmarkType('bookmark');
                $bookmark->save();
                $bookmarktotal = Bookmark::count([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and bookmark_type=:bookmark_type: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook_id,
                        'bookmark_type' => 'bookmark',
                        'status_id' => $status_id_enable
                    ]
                ]);
                $demo =
                    [
                        'value' => 'enable',
                        'totalbookmark' => $bookmarktotal,
                    ];
            } else {
                $bookmark->setStatusId($status_id_disable);
                $bookmark->setBookmarkType('bookmark');
                $bookmark->save();
                $bookmarktotal = Bookmark::count([
                    'conditions' => 'recipe_cook_id=:recipe_cook_id: and bookmark_type=:bookmark_type: and status_id=:status_id:',
                    'bind' => [
                        'recipe_cook_id' => $recipe_cook_id,
                        'bookmark_type' => 'bookmark',
                        'status_id' => $status_id_enable
                    ]
                ]);
                $demo =
                    [
                        'value' => 'disable',
                        'totalbookmark' => $bookmarktotal,
                    ];
            }
        } else {
            $bookmark = new Bookmark();
            $bookmark->setId($bookmark->getSequenceId());
            $bookmark->setUserId($auth_site_home['id']);
            $bookmark->setRecipeCookId($recipe_cook_id);
            $bookmark->setStatusId($status_id_enable);
            $bookmark->setBookmarkType('bookmark');
            $bookmark->save();
            $bookmarktotal = Bookmark::count([
                'conditions' => 'recipe_cook_id=:recipe_cook_id: and bookmark_type=:bookmark_type: and status_id=:status_id:',
                'bind' => [
                    'recipe_cook_id' => $recipe_cook_id,
                    'bookmark_type' => 'bookmark',
                    'status_id' => $status_id_enable
                ]
            ]);
            $demo =
                [
                    'value' => 'enable',
                    'totalbookmark' => $bookmarktotal,

                ];

        }
        echo json_encode($demo);
        die();
    }

    public function ajaxRatingAction()
    {
        $this->view->disable();
        $post = $this->request->getPost();
        $status_id_disable = Status::getStatusIdByCode('disable');
        $status_id_enable = Status::getStatusIdByCode('enable');
        $bookmark_user = BookmarkUser::findFirst([
            'conditions' => 'user_id=:user_id: and bookmark_user_id=:bookmark_user_id: and type=:type:',
            'bind' => [
                'user_id' => $post['user'],
                'bookmark_user_id' => $post['bookmark_user'],
                'type' => 'rate'
            ]
        ]);
        if ($bookmark_user) {
            $bookmark_user->setPoint($post['point_rate']);
            $bookmark_user->save();
            $total = BookmarkUser::average([
                'column' => 'point',
                'conditions' => 'bookmark_user_id=:bookmark_user_id: and status_id=:status_id: and type=:type:',
                'bind' => [
                    'bookmark_user_id' => $post['bookmark_user'],
                    'status_id' => $status_id_enable,
                    'type' => 'rate'
                ]
            ]);
            $demo =
                [
                    'value' => $total,
                ];

        } else {
            $bookmark_user = new BookmarkUser();
            $bookmark_user->setId($bookmark_user->getSequenceId());
            $bookmark_user->setUserId($post['user']);
            $bookmark_user->setBookmarkUserId($post['bookmark_user']);
            $bookmark_user->setStatusId($status_id_enable);
            $bookmark_user->setType('rate');
            $bookmark_user->setPoint($post['point_rate']);
            $bookmark_user->save();
            $total = BookmarkUser::average([
                'column' => 'point',
                'conditions' => 'bookmark_user_id=:bookmark_user_id: and status_id=:status_id: and type=:type:',
                'bind' => [
                    'bookmark_user_id' => $post['bookmark_user'],
                    'status_id' => $status_id_enable,
                    'type' => 'rate'
                ]
            ]);
            $demo =
                [
                    'value' => $total
                ];
        }
        echo json_encode($demo);
        die();
    }
}