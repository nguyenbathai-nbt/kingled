<?php


namespace CoursemosCloud\Modules\Dashboard\Controllers;


use CoursemosCloud\Common\Mvc\DashboardControllerBase;
use CoursemosCloud\Common\Models\Opteam\OpUsers;
use CoursemosCloud\Modules\Customer\Forms\CreateCustomerForm;
use CoursemosCloud\Modules\Customer\Forms\SearchCustomerForm;
use CoursemosCloud\Modules\Dashboard\Forms\ChangePasswordForm;
use CoursemosCloud\Modules\Dashboard\Forms\CreateOpUsersForm;
use CoursemosCloud\Modules\Dashboard\Forms\CreatOpUsersForm;
use CoursemosCloud\Modules\Dashboard\Forms\SearchOpUsersForm;
use Phalcon\Mvc\Model\Criteria;
use Phalcon\Paginator\Adapter\Model as Paginator;
use Phalcon\Tag;

class OpUsersController extends DashboardControllerBase
{
    /**
     * Default action, shows the search form
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->view->names = [
            [
                'label' => 'Users',
                'href' => '/users'
            ]
        ];
    }

    public function indexAction()
    {
        $this->view->activemenu = [
            'op',
            'opuser'
        ];
        $current_page = $this->request->getQuery('page', 'int', 1);
        $limit_of_page = 10;
        $form = new SearchOpUsersForm();
        $this->view->form = $form;
        $cond_array = [];
        $param_url = $this->request->getQuery();
        foreach ($param_url as $key => $value) {
            Tag::setDefault($key, $value);
            if ($key != '_url' && $key != 'page' && $value != '') {
                if ($key == 'active' && $value != '') {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                } else if ($key == 'active' && $value == '') {
                    array_push($cond_array, "active='1'");
                } else {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key] = $value;
                }
            }
        }
        if (count($cond_array) == 0) {
            array_push($cond_array, "active='1'");
        }
        $conditions = implode(' AND ', $cond_array);
        $op_users = OpUsers::find([
            'conditions' => $conditions,
            'bind' => $bind_data,
            'limit' => $limit_of_page,
            'offset' => (($current_page - 1) * $limit_of_page),
        ]);
        $op_users_total_record = OpUsers::count([
            'conditions' => $conditions,
            'bind' => $bind_data,
        ]);
        if (count($op_users) == 0) {
            $this->view->op_user = null;
        } else {
            $this->view->op_user = $op_users;
        }

        $this->view->paging = $this->helper->util()->paging($op_users_total_record, $this->request->getQuery(), $limit_of_page, $current_page);

    }

    /**
     * Searches for users
     */
    public function searchAction()
    {
        $this->view->names = [
            [
                'label' => 'Users',
                'href' => '/users'
            ]
        ];
        $numberPage = 1;
        if ($this->request->isPost()) {
            $query = Criteria::fromInput($this->di, OpUsers::class, $this->request->getPost());
            $this->persistent->searchParams = $query->getParams();
        } else {
            $numberPage = $this->request->getQuery("page", "int");
        }

        $parameters = [];
        if ($this->persistent->searchParams) {
            $parameters = $this->persistent->searchParams;
        }

        $users = OpUsers::find($parameters);
        if (count($users) == 0) {
            $this->flashSession->notice("The search did not find any users");
            return $this->response->redirect("/users");
        }

        $paginator = new Paginator([
            "data" => $users,
            "limit" => 10,
            "page" => $numberPage
        ]);

        $this->view->page = $paginator->getPaginate();
    }

    /**
     * Creates a User
     */
    public function createAction()
    {
        $this->view->names = [
            [
                'label' => 'Users',
                'href' => '/users'
            ],
            [
                'label' => 'Create user',
                'href' => '/users/create'
            ]
        ];
        $this->view->activemenu = [
            'op',
            'opcreate'
        ];
        $form = new CreatOpUsersForm();

        if ($this->request->isPost()) {
            $post = $this->request->getPost();
            foreach ($post as $key => $value) {
                $post[$key] = trim($value);
            }
            $user = new OpUsers();
            $form->bind($post, $user);
            if ($form->isValid($this->request->getPost()) == false) {
                foreach ($form->getMessages() as $message) {
                    $this->flash->error($message);
                }
            } else {

                if (!$user->save()) {
                    foreach ($user->getMessages() as $msg) {
                        $this->flashSession->error($msg);
                    }
                } else {
                    $this->flashSession->success("User was created successfully");
                    $this->redirect('/users');
                }
            }
            $form->setEntity($user);
        }
        $form->clear();
        $this->view->form = $form;
    }

    /**
     * Saves the user from the 'edit' action
     */
    public function editAction($id)
    {

        $this->view->names = [
            [
                'label' => 'Users',
                'href' => '/users'
            ],
            [
                'label' => "Edit user",
                'href' => '#'
            ]
        ];
        $this->view->activemenu = [
            'op',
            'opuser'
        ];
        $user = OpUsers::findFirstById($id);

        if (!$user) {
            $this->flash->error("User was not found");
            return $this->redirect("/users");
        }
        $form = new CreatOpUsersForm();
        if ($this->request->isPost()) {
            $user->assign([
                'full_name' => trim($this->request->getPost('full_name', 'striptags')),
                'role' => trim($this->request->getPost('role', 'int')),
                'email' => trim($this->request->getPost('email', 'email')),
                'phone' => trim($this->request->getPost('phone', 'striptags')),
                'banned' => trim($this->request->getPost('banned')),
                'suspend' => trim($this->request->getPost('suspend')),
                'active' => trim($this->request->getPost('active'))
            ]);
            if ($form->isValid($this->request->getPost()) == false) {
                foreach ($form->getMessages() as $message) {
                    $this->flash->error($message);
                }
            } else {

                if (!$user->save()) {
                    $this->flash->error($user->getMessages());
                } else {

                    $this->flashSession->success("User was updated successfully");
                    $this->redirect("/users");
                }
            }
            $form->setEntity($user);
        } else {
            $form->setEntity($user);
        }
        $this->view->form = $form;
    }

    /**
     * Deletes a User
     *
     * @param int $id
     */
    public function deleteAction($id)
    {
        $user = OpUsers::findFirstById($id);
        if (!$user) {
            $this->flashSession->error("User was not found");
            return $this->redirect("/users");
        }
        $user->active = 0;
        if (!$user->save()) {
            $this->flashSession->error($user->getMessages());
        } else {
            $this->flashSession->success("User was deleted");
        }

        return $this->redirect("/users");
    }


}