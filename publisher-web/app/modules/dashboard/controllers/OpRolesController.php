<?php


namespace CoursemosCloud\Modules\Dashboard\Controllers;


use CoursemosCloud\Common\Models\Opteam\OpRoles;
use CoursemosCloud\Common\Models\Opteam\OpUsers;
use CoursemosCloud\Modules\Dashboard\Forms\CreateOpRolesForm;
use CoursemosCloud\Modules\Dashboard\Forms\SearchOpRolesForm;
use CoursemosCloud\Common\Mvc\DashboardControllerBase;
use CoursemosCloud\Modules\Dashboard\Forms\SearchOpUsersForm;
use Phalcon\Paginator\Adapter\Model as Paginator;
use Phalcon\Tag;

class OpRolesController extends DashboardControllerBase
{
    public function initialize()
    {
        $this->view->activemenu = [
            'opacl',
            'oprole'
        ];
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        $this->view->names = [
            [
                'label' => 'Roles',
                'href' => '/roles'
            ],
        ];
        $current_page = $this->request->getQuery('page', 'int', 1);
        $limit_of_page = 10;
        $form = new SearchOpRolesForm();
        $this->view->form = $form;
        $cond_array = [];
        $param_url = $this->request->getQuery();
        foreach ($param_url as $key => $value) {
            Tag::setDefault($key, $value);
            if ($key != '_url' && $key != 'page' && $value != '') {
                if ($key == 'active' && $value != '') {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key]=$value;
                } else if ($key == 'active' && $value == '') {
                    array_push($cond_array, "active='1'");
                } else {
                    $value = trim($value);
                    array_push($cond_array, "$key =:$key:");
                    $bind_data[$key]=$value;
                }
            }
        }
        if(count($cond_array)==0)
        {
            array_push($cond_array, "active='1'");
        }
        $conditions = implode(' AND ', $cond_array);
        $op_users_roles = OpRoles::find([
            'conditions' => $conditions,
            'bind'=>$bind_data,
            'limit' => $limit_of_page,
            'offset' => (($current_page - 1) * $limit_of_page),
        ]);
        $op_users_roles_total_record = OpRoles::count([
            'conditions' => $conditions,
            'bind'=>$bind_data,
        ]);
        if (count($op_users_roles) == 0) {
            $this->view->op_users_roles = null;
        } else {
            $this->view->op_users_roles = $op_users_roles;
        }

        $this->view->paging = $this->helper->util()->paging($op_users_roles_total_record, $this->request->getQuery(), $limit_of_page, $current_page);

    }

    public
    function createAction()
    {
        $this->view->names = [
            [
                'label' => 'Roles',
                'href' => '/roles'
            ],
            [
                'label' => 'Create role',
                'href' => '/roles/create'
            ],
        ];
        $form = new CreateOpRolesForm();
        $role = new OpRoles();
        if ($this->request->isPost()) {
            $post = $this->request->getPost();
            foreach ($post as $key => $value) {
                $post[$key] = trim($value);
            }
            $form->bind($post, $role);
            if (!$role->save()) {
                foreach ($role->getMessages() as $msg) {
                    $this->flashSession->error($msg);
                }
            } else {
                $this->flashSession->success("Roles was created successfully");
                $this->redirect('/roles');
            }


        }
        $form->clear();
        $this->view->form = $form;
    }

    public
    function editAction($id)
    {
        $this->view->names = [
            [
                'label' => 'Roles',
                'href' => '/roles'
            ],
            [
                'label' => 'Edit role',
                'href' => '/roles/create'
            ],
        ];

        $role = OpRoles::findFirstById($id);
        $form = new CreateOpRolesForm();
        if (!$role) {
            $this->flash->error("Role was not found");
            return $this->redirect('/roles');
        }
        if ($this->request->isPost()) {
            $role->assign([
                'name' => trim($this->request->getPost('name', 'striptags')),
                'description' => trim($this->request->getPost('description', 'striptags')),
                'active' => trim($this->request->getPost('active'))
            ]);

            if (!$role->save()) {
                foreach ($role->getMessages() as $msg) {
                    $this->flashSession->error($msg);
                }
            } else {
                $this->flashSession->success("Roles was updated successfully");
                return $this->redirect('/roles');
            }

            $form->setEntity($role);
        } else {
            $form->setEntity($role);
        }

        $this->view->form = $form;
    }

    /**
     * Deletes a Profile
     *
     * @param int $id
     */
    public
    function deleteAction($id)
    {
        $role = OpRoles::findFirstById($id);
        if (!$role) {

            $this->flashSession->error("Profile was not found");

            return $this->dispatcher->forward([
                'action' => 'index'
            ]);
        }

        if (!$role->delete()) {
            foreach ($role->getMessages() as $msg) {
                $this->flashSession->error($msg);
            }
        } else {
            $this->flashSession->success("Profile was deleted");
        }

        return $this->dispatcher->forward([
            'action' => 'index'
        ]);
    }
}